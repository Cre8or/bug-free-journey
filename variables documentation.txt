ITEM DATA:
	Shared:
		// THE FOLLOWING MACROS MUST ALWAYS BE AVAILABLE FROM THE VERY BEGINNING! THESE ARE THE BARE MINIMUM - INITIALISING THEM IS ABSOLUTELY MANDATORY!!!
		// Whenever you create a new itemData, make sure these macros are ALWAYS assigned to something! Most scripts heavily depend on them being defined!
		MACRO_VARNAME_UID				// The item's unique ID
		MACRO_VARNAME_CLASS				// The item's class
		MACRO_VARNAME_CONFIGTYPE			// The item's config type (enums for CfgWeapons, CfgVehicles, etc. - see macros.hpp)
		MACRO_VARNAME_CATEGORY				// The item's category

		// These macros are not *quite* as important as the ones above (they may or may not be initialised), but are still important and are used in other scripts
		MACRO_VARNAME_SLOTPOS				// The slot position that this item is in, in format [PosX, PosY] (e.g. inside a container). NOTE: If the value of PosX is negative, the item is in a reserved slot (e.g. a player's weapon slots, or linked items)! See the slotPos enums in macros.hpp
		MACRO_VARNAME_PARENT				// The item's parent object (e.g. the container it is inside of) - NOT its item data! NOTE: For dropped items, this points at the ground holder it's in (even for backpacks!)
		MACRO_VARNAME_PARENTDATA			// The item data of the parent object (e.g. the item data of the container that an item is inside of)
		MACRO_VARNAME_ISROTATED				// Whether or not the control is rotated 90°

	Outside of reserved slots:
		MACRO_VARNAME_OCCUPIEDSLOTS			// Returns a list of slot position variables that are in use by this item (see MACRO_VARNAME_SLOT_X_Y for format). Each occupied slot points back at the item data of the item that occupies it

	Only magazines:
		MACRO_VARNAME_MAG_AMMO				// The amount of ammo left in this magazine

	Only weapons:
		MACRO_VARNAME_ACC_MUZZLE			// Points to the item data of this weapon's muzzle attachment
		MACRO_VARNAME_ACC_BIPOD				// Points to the item data of this weapon's bipod attachment
		MACRO_VARNAME_ACC_OPTIC				// Points to the item data of this weapon's optic attachment
		MACRO_VARNAME_ACC_SIDE				// Points to the item data of this weapon's side attachment
		MACRO_VARNAME_MAG				// Points to the item data of this weapon's primary magazine
		MACRO_VARNAME_MAGALT				// Points to the item data of this weapon's secondary magazine

	Only containers:
		MACRO_VARNAME_CONTAINER				// Points to the container object that this container's item data belongs to. Only used on container objects, as regular items do not have an object associated to them
		MACRO_VARNAME_CONTAINERSIZE			// Returns the size of the container in format [Width,Height] (in slot counts). Includes the last line of slots, even if it has fewer slots than the other ones
		MACRO_VARNAME_CONTAINERSLOTSONLASTY		// Returns how many slots the last line of the container has. Can return anything between 1 and the container size's width (default)
		MACRO_VARNAME_ITEMS				// Holds a list of items that are inside the container. Used to determine what items the container currently has - anything NOT inside this list is not "there" to the inventory! Be cautious with how you use this variable!
		MACRO_VARNAME_SLOT_X_Y				// Used to turn a slot position (X, Y) into a string that can be used as a variable name (for use in setVariable/getVariable)

-------------------------------------------------------
SLOT CONTROLS:

	Shared:
		MACRO_VARNAME_CLASS				// The class of the item inside this slot
		MACRO_VARNAME_DATA				// Points to the itemData of the item in the slot. Also used to determine whether a slot is active (full) or not (empty)
		MACRO_VARNAME_SLOTSIZE				// Holds the size of the slot in format [width,height] (in slot counts)
		MACRO_VARNAME_SLOTPOS				// Holds the position of the slot in format [posX,posY] (in slot counts)
		MACRO_VARNAME_PARENTDATA			// Points to the data of the parent container the item is inside of
		MACRO_VARNAME_UI_CHILDCONTROLS			// Returns a list of all child controls associated with the slot (weapon attachments, text, ammo bar, etc.)
		MACRO_VARNAME_UI_INITIALISED			// Whether or not the control has been initialised (used for executing code only once when setting up the control (e.g. adding event handlers))
		MACRO_VARNAME_UI_CTRLICON			// Icon control of the slot (if there is an item, it's the class's previewIcon, otherwise it may be a specific default icon path). If a slot is occupied, this variable is usually checked to determine whether or not the slot control already has child controls
		MACRO_VARNAME_UI_ISBEINGDRAGGED			// Whether the control is being dragged. Only used on the original control that was clicked on (which goes invisible upon starting dragging), NOT on the control that follows the cursor (that one can be fetched via MACRO_VARNAME_UI_DRAGGEDCTRL)!

	Only Regular slots:
		MACRO_VARNAME_ISROTATED				// Whether or not the control is rotated 90°
		MACRO_VARNAME_UI_CTRLPARENT			// Points to the slot control of the parent container (e.g. an item slot inside a backpack points at the backpack's slot control)

	Only reserved slots:
		MACRO_VARNAME_SLOT_X_Y				// Used to turn a slot position (X, Y) into a string that can be used as a variable name (for use in setVariable/getVariable)
		MACRO_VARNAME_UI_DEFAULTICONPATH		// Holds the path to the default icon of this reserved slot. Used to display what kind of item can go into the slot when it is empty (e.g. uniform/vest/backpack, a linked item, etc)

	Only container slots:
		MACRO_VARNAME_UI_ALLSLOTFRAMES			// Returns a list of all slot controls under this container slot control (e.g. all item slot controls inside a backpack)

-------------------------------------------------------
INVENTORY:

	MACRO_VARNAME_UI_FRAMETEMP				// Holds the temporary frame control that follows the cursor while something is being dragged. Gets removed when dragging is completed or aborted
	MACRO_VARNAME_UI_ICONTEMP				// Holds the temporary icon control that is created when dragging an item out of a reserved slot. Used to display the default icon path on reserved slots while dragging. Gets removed when dragging is completed or aborted

	MACRO_VARNAME_UI_DRAGGEDCTRL				// Holds the frame control that is being dragged. Unlike MACRO_VARNAME_UI_FRAMETEMP, this does not point towards the control that is actually following the cursor, but to the one that was clicked on when the dragging event was initiated
	MACRO_VARNAME_UI_HIGHLITCONTROLS			// Holds an array of all controls that are currently highlit. Used when dragging items to visualise which slots they may or may not go into. This array holds both forbidden and allowed slot controls (e.g. displayed as red and green respectively)
	MACRO_VARNAME_UI_ALLOWEDCONTROLS			// Holds an array of all reserved controls that the currently dragged item may go into
	MACRO_VARNAME_UI_FORBIDDENCONTROLS			// Holds an array of all reserved controls that the currently dragged item may NOT go into

	MACRO_VARNAME_UI_NEXTUPDATE_GROUND			// Saves the time when the next ground UI update is scheduled (polling nearby items). Time is based on the `time` command and is evaluated each frame
	MACRO_VARNAME_UI_FORCEREDRAW_GROUND			// Used to forcefully update the ground UI when, as an example, an item's size was changed (so all items need to be sorted again)
	MACRO_VARNAME_UI_ACTIVECONTAINER			// Points to the container object that the inventory was opened on (e.g. a vehicle, corpse, ammo crate, etc.)
	MACRO_VARNAME_UI_ACTIVECONTAINER_VISIBLE		// Whether or not the active container is currently visible. Used in ui_update_ground to rescale the ground controls group and show/hide the container controls group
	MACRO_VARNAME_UI_GROUND_HIGHESTPOSY			// Saves the highest Y position that is occupied by an item in the ground UI. Used in ui_update_ground to rescale the drop control in order to fit the entire controls group

	MACRO_VARNAME_UI_EH_MOUSEBUTTONUP			// Storesthe ID of the inventory's MouseButtonUp event handler (used to detect dragging)
	MACRO_VARNAME_UI_EH_MOUSEBUTTONDOWN			// Storesthe ID of the inventory's MouseButtonDown event handler (used to detect dragging)
	MACRO_VARNAME_UI_EH_KEYDOWN				// Storesthe ID of the inventory's KeyDown event handler (used to rotate items while dragging)

	MACRO_VARNAME_UI_STORAGE_CURRENTINDEX_ITEM		// Generating hundreds of slot controls takes time. To reduce lag, the storage UI generates the controls in small batches (each frame). This macro stores the index of the current container's items array, and is used to resume at the right item on the next frame
	MACRO_VARNAME_UI_STORAGE_CURRENTINDEX_CONTAINER		// Saves the index of the container that we are currently generating slot controls for. Used in conjunction with MACRO_VARNAME_UI_STORAGE_CURRENTINDEX_ITEM
	MACRO_VARNAME_UI_STORAGE_MAXITERATIONS			// Determines how many slot controls we may generate (per frame) in the storage UI (see above for more info)
	MACRO_VARNAME_UI_STORAGE_INITIALISED			// Whether or not the storage UI has finished initialising (i.e. whether all slot controls are now fully generated). Used to prevent interference from outside scripts, and from the inventory synchroniser

-------------------------------------------------------
MISSION NAMESPACE:

	MACRO_VARNAME_UI_EH_EACHFRAME				// Stores the ID of the stackable eachFrame event handler that is responsible for updating the inventory UI

-------------------------------------------------------
CONFIG ENTRIES:							// NOTE: The following macros are to be used inside the config class of items/weapons/vehicles and are used to manipulate the way they interact with the inventory. They are not used in-game!

	MACRO_VARNAME_CFG_SLOTSIZE				// The slot size of an item (in format [X,Y]). Used to overwrite an item's size to a custom value
	MACRO_VARNAME_CFG_CONTAINERSIZE				// The size of a container item. Determines how many items can fit inside of it
	MACRO_VARNAME_CFG_SLOTSONLASTY				// How many slots are on the last line of a container. Only used on containers. If not provided, assumes the width of the container size (-> all lines have the same amount of slots)
	MACRO_VARNAME_CFG_INVDISTANCE				// The distance (measured between the container object's memorySupplyPoint and the player's eyePos), below which the container's inventory can be accessed. If not provided, determines a value based on the bounding size of the class
