TODO:
- Figure out a new system for getClassCategory to avoid classname collisions (e.g. in both CfgWeapons and CfgVehicles)
	* Save the category as information onto the itemData?
	* Save the config path/category onto the itemData for quick access? (e.g. CfgWeapons/CfgVehicles or with an enum)
- Write a config function that returns the display name of a class and caches it (for use in generateChildControls)
- Write a function that checks if a given object should generate container data (e.g. if it can fit inventory) and implement it into the ground update/init events
- Prevent the ground UI from showing items that are obstructed (e.g. behind a wall)
- Position dropped items on the first surface under the player's current position (otherwise items may float in the air if the player dropped while jumping/on a ladder)
- Add a check in ui_update_ground to delete empty ground holders when they are detected (sometimes they don't auto-clean -> potential duplicating exploit)
- Add a way to quickly move items across containers, similar to modded Minecraft
	* Holding ctrl/shift while clicking on items to instantly drag them across?
- Implement the Quicksort algorithm into generateContainerData
- Add an item list to the player for weapons/assigned items?
- Add slotPos enums for weapon attachments/magazines?
- Update weapon's magazine ammo counts when firing (using an EH)
- Look for an alternative to isNil {} in ui_init, as it may permanently freeze the game when encountering a script error
- Add a global scale multiplier (macro) for slot pictures?
- Add a garbage collector to get rid of unused/removed locations that are building up over time (potential memory leak!)
- Ensure dragging items to/from objects with simulation disabled is handled properly (ideally, forbid dragging to/from them!)
- Search for "TODO" and "DEBUG" comments and address them





DONE:	(top: most recent)
- Move the "Draw" event raises to wherever generateChildControls used to be called
- Add a "Draw" IEH (to update controls whenever needed)
- Replace generateChildControls with category-specific draw functions
	* Get rid of the child control enumerations when done (MACRO_ENUM_CTRL_*)
- Move the child controls offset calculation to the dragging event to reduce overhead (since it's only needed there)
- Make use of the new SQF function macros (go through all files and replace all occurences with them, whenever possible)
- Add a "Take", "Drop" and "Move" IEH and implement them
- Add an "Init" IEH that is triggered whenever an itemData is created (and filled out with basic data)
- Add a class parameter to the raiseEvent function (because we often know the class when we call that function) instead of polling it from the itemData every time
- Refactor generateContainerData to include a parameter for the parent object
- Add a basic Inventory EventHandler system
	* Config-based IEHs for classes (IEHS are inherited from parents, unless explicitely stated otherwise -> "isFinal")
	* Config classes should accept functions and/or code snippets
	* Events should be raised wherever is appropriate, by the inventory (and other related functions)
	* IEHs should be cached on special namespaces to reduce overhead
- Write a function check if an object is within distance to open its inventory (compare to Arma 3's inventory distance handling)
- Fix the container controls group obstructing the drop control when it not shown
- Fix the inventory's cursor position not being reset when exiting a control, making it possible to drop items by hovering over the drop control and the moving the mouse away (e.g. over empty space) and left-clicking
- Fix the ground drop control not rescaling to match the items count (vertically)
- Make ground items hide their frame control when dragging, so they can be dropped back in the exact space they were in
- Fix items with a width greater than the max slots per line count being positioned incorrectly in the ground UI
- Make the ground UI distance check use the player's eyes position instead of the base of the model (feet)
- Fix the arsenal breaking the container data of the uniform/vest/backpack, by clearing the fakeMass items and re-adding the real ones upon opening it
- Investigate why getClassIcon receives a weapon accessories array when drawing weapons that were not dropped through the custom inventory UI
- Fix uniforms/vests/backpacks slots highlighting as red when dragging an item of the appropriate category
	* Use isEqualTo instead of == when you want compare two objNulls
- Add the ability to interact with the world
 	* Detect ground holders and inventories in a certain radius around the player
	* Update the list (and alongside it, the UI) of nearby inventories when moving
- Detect changes done to the actual inventory container (outside manipulation via e.g. scripting commands)
	* Detect changes to the reserved slots and update the weapons UI
	* Detect magazine changes
	* Detect weapon items (attachments/loaded magazines)
- Write a sorting algorithm to sort items by any criteria (size, mass, etc.)
	-> Quicksort algorithm
- Write a function to handle deleting slot controls and all of their child controls
- Generating container data on ground holders with multiple items should split it into multiple holders with one item each (so that the containerSize fits it)
- Remodify ui_update_weapons and ui_update_storage events to call ui_dragging_abort if any current control is being dragged instead of recreating it ( -> less hacky)
- Modify ui_update_weapons and ui_update_storage events to recreate the slot controls rather than modifying them (allowing the eachFrame dragging fix to fire)
- Modify the ui_dragging_abort event so that it always resets highlit controls and removes temporary controls
- Move the MACRO_VARNAME_UI_FRAMETEMP macro onto the inventory, rather than the dragged control
- Detect changes to the player's weapons/attached items and call ui_update_weapons
- Fix moving assigned items (map, compass, GPS, watch, radio) not removing the original items
- Fix ui_update_weapons and ui_update_storage recreating child controls on slots that haven't changed!
- Fix generateContainerData ignoring the last Y-line's slots count when filling a container
- Fix cre_fnc_inv_moveItem not reapplying the correct ammo count to weapon magazines (when moving to reserved weapon slots)
- Add getInvMass ( -> containerData) and getRealMass ( -> container) functions
- Add variables documentation sheet
- Add support for rotating items (by pressing R/space?)
	* Add a isRotated variable to the item data
	* Reset isRotated variable when dragging into a reserved slot
	* Update generateChildControls to take the isRotated variable into account
	* Call ui_mouse_moving event after rotating so the highlighted slots update
		+ Requires the inventory to remember the last cursor control (done) AND the last relative pos!
- Add support for container items (ammo boxes, first aid pouches, etc, cases, etc.)
	* For Arma 3 to consider these items as containers, they need to BE a container (e.g. vest) --> inheritance
	* On-ground model can be different from the on-player model (to avoid errors, and maybe detect cheaters)
- Fully implement dragging functionality so it actually works (actually moving things around in inventories)
	* Modify the player/object's container data
	* Modify the player/object's actual inventory
- Make generateContainerData filter out the fake weight magazines
- Write a script that monitors the total mass of magazines inside a container and replaces them with dummy weights
	* Required to prevent magazines from getting auto-reloaded when adding weapons to a unit, and when manually reloading
	* Needs custom items with preset mass to be defined via config ( --> needs a mod)
- Prevent moving uniforms, vests and backpacks into containers if they're not empty
- Fix generateContainerData not setting the container variable on sub-containers (e.g. nested backpacks)
- Rewrite the storage update event to detect when container are added/removed/changed, and to handle slot creation/deletion automatically
- Remove unused unit varname macros (NVGs, radio, weapons, uniform, vest, etc.)
- Update canFitItem function to no longer use plain-text varnames (for the player data), but rather slot position enums
- Write a function to move items between actual inventories
- Re-add custom categories for binoculars and NVGs (for compatibility with inventory related scripting commands)
- Rename the PARENT macro to PARENTDATA (because it doesn't link to the object, but the data)
- Reassign the PARENT macro to point towards the container
- Make a CONTAINER macro that is used on *actual* containers ONLY, that returns the associated container object
- Reorganise function locations (and names) with prefixes to avoid overlap and to improve clarity
	* Functions should go in specific folders, such as "UI", "AI" and "inventory"
	* Find an abbreviation for each of these folders and use it in the name of the function
	  (e.g. "inventory" becomes "inv" --> cre_fnc_inv_createNamespace)
	  - Fix child controls not getting deleted when dragging a reserved slot item onto its own slot
- Fix incorrect slot colouring when calling ui_dragging_start after the mouse has moved outside of the dragged control
- Figure out why dragging items into their exact original slot causes them to become undraggable
- Improve the debug hint to make the data more readable
- Fix dragging items/containers from reserved slots into regular slots causing errors (in ui_dragging_stop)
- Redefine slotPos variable to always be an array of numbers (X, Y)
	* First entry (X) can be negative, to indicate that the item/container is in a reserved slot
	* In this case, the first entry must match the reserved slot via an enumerations list
	* Adapt all events and functions that use the slot position to accomodate for the enums
- Fix being unable to drag reserved items/weapons from containers into their slots (if they are empty)
- Find a way to represent the origin slots of an item as "free" when dragging, without breaking anything else
- Fix vests and uniforms getting picked up twice in genrateContainerData
- Find a way to identify whether an item can go in the assigned slots/weapon slots
- Make a function to detect whether an item can fit in a specific container slot
	* Have a fast mode for performance that just returns true or false
	* have a detailed mode that also returns the controls that are required/blocking the item
- Find a way to determine which control the mouse cursor is currently on
- NVGs/Binoculars should be counted as part of the item category
- Add child controls support for weapon attachments
- Optimise the functions that use namespaces by only checking for the namespace if the result wasn't found
- Make a generateWeaponAccData function to generate the item data for weapon accessories (and loaded magazines)
- Generate data on items in the weapons menu (assigned items, weapons, NVGs, binoculars, etc.)
- Unify namespace variable names using macros
- Write two new config functions to fetch a weapon's magazines array and a magazine's max ammo count
- Tweak the generateContainerData function to fill the item data with actual item info (magazine capacity, weapon attachments, etc.)
- Distinguish between more categories:
	* Unifoms
	* Vests
	* Backpacks
- Convert weapons menu to use generateChildControls
	* Remove built-in icon controls and associated macros
	* Modify weapons/medical menu events to hide the new child controls correctly
- Add a fillbar to magazine items if they have more than one bullet
- Rewrite the dragging code to accomodate for multiple child controls, irrespective of scale, offset and count
 	* Also consider a way of detecting the "main" icon control (1st item in array?)
	* Finally, decide on default icon paths for various inventory items (magazines, grenades, attachments, etc.)
- Remove dragging controls from inventory.hpp (and their corresponding macros)
- Automatically generate inventory data for unknown containers when opening the inventory screen
- Figure out the inventory data format
	* Generate UIDs for every item
	* Store a minimum of 3 entries in the item data:
		+ UID
		+ classname
		+ slot position
	* Generate inventory slots layout automatically (for not-yet-processed containers)
- Make use of getClassSlotSize in ui_dragging_init event to scale the controls accordingly when dragging
- Figure out why weapon controls can't be dragged further than the bottom of the inventoy screen (and get stuck)





FAILED:
- When dragging, dynamically set the focus on the control group that the mouse cursor is over (so that scrollbars work)
